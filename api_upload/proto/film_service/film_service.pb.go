// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: proto/film_service.proto

package film_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MediaType int32

const (
	MediaType_HOME          MediaType = 0
	MediaType_TV_SERIES     MediaType = 1
	MediaType_ANIMATE       MediaType = 2
	MediaType_MOVIE         MediaType = 3
	MediaType_VARIETY_SHOWS MediaType = 4
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "HOME",
		1: "TV_SERIES",
		2: "ANIMATE",
		3: "MOVIE",
		4: "VARIETY_SHOWS",
	}
	MediaType_value = map[string]int32{
		"HOME":          0,
		"TV_SERIES":     1,
		"ANIMATE":       2,
		"MOVIE":         3,
		"VARIETY_SHOWS": 4,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_film_service_proto_enumTypes[0].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_proto_film_service_proto_enumTypes[0]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{0}
}

type MediaCategory int32

const (
	MediaCategory_ALL_CATEGORY                 MediaCategory = 0
	MediaCategory_TV_SERIES_CN_SERIES          MediaCategory = 1
	MediaCategory_TV_SERIES_KR_SERIES          MediaCategory = 2
	MediaCategory_TV_SERIES_US_SERIES          MediaCategory = 3
	MediaCategory_TV_SERIES_JP_SERIES          MediaCategory = 4
	MediaCategory_TV_SERIES_TW_SERIES          MediaCategory = 5
	MediaCategory_TV_SERIES_HK_SERIES          MediaCategory = 6
	MediaCategory_TV_SERIES_OVERSEAS_SERIES    MediaCategory = 7
	MediaCategory_TV_SERIES_DOCUMENTARY_SERIES MediaCategory = 8
	MediaCategory_ANIMATE_ANIMATE              MediaCategory = 9
	MediaCategory_MOVIE_DRAMA                  MediaCategory = 10
	MediaCategory_MOVIE_ACTION                 MediaCategory = 11
	MediaCategory_MOVIE_SCI_FI                 MediaCategory = 12
	MediaCategory_MOVIE_COMEDY                 MediaCategory = 13
	MediaCategory_MOVIE_HORROR                 MediaCategory = 14
	MediaCategory_MOVIE_ROMANCE                MediaCategory = 15
	MediaCategory_MOVIE_WAR                    MediaCategory = 16
	MediaCategory_MOVIE_ANIMATED               MediaCategory = 17
	MediaCategory_VARIETY_SHOW_VARIETY_SHOW    MediaCategory = 18
)

// Enum value maps for MediaCategory.
var (
	MediaCategory_name = map[int32]string{
		0:  "ALL_CATEGORY",
		1:  "TV_SERIES_CN_SERIES",
		2:  "TV_SERIES_KR_SERIES",
		3:  "TV_SERIES_US_SERIES",
		4:  "TV_SERIES_JP_SERIES",
		5:  "TV_SERIES_TW_SERIES",
		6:  "TV_SERIES_HK_SERIES",
		7:  "TV_SERIES_OVERSEAS_SERIES",
		8:  "TV_SERIES_DOCUMENTARY_SERIES",
		9:  "ANIMATE_ANIMATE",
		10: "MOVIE_DRAMA",
		11: "MOVIE_ACTION",
		12: "MOVIE_SCI_FI",
		13: "MOVIE_COMEDY",
		14: "MOVIE_HORROR",
		15: "MOVIE_ROMANCE",
		16: "MOVIE_WAR",
		17: "MOVIE_ANIMATED",
		18: "VARIETY_SHOW_VARIETY_SHOW",
	}
	MediaCategory_value = map[string]int32{
		"ALL_CATEGORY":                 0,
		"TV_SERIES_CN_SERIES":          1,
		"TV_SERIES_KR_SERIES":          2,
		"TV_SERIES_US_SERIES":          3,
		"TV_SERIES_JP_SERIES":          4,
		"TV_SERIES_TW_SERIES":          5,
		"TV_SERIES_HK_SERIES":          6,
		"TV_SERIES_OVERSEAS_SERIES":    7,
		"TV_SERIES_DOCUMENTARY_SERIES": 8,
		"ANIMATE_ANIMATE":              9,
		"MOVIE_DRAMA":                  10,
		"MOVIE_ACTION":                 11,
		"MOVIE_SCI_FI":                 12,
		"MOVIE_COMEDY":                 13,
		"MOVIE_HORROR":                 14,
		"MOVIE_ROMANCE":                15,
		"MOVIE_WAR":                    16,
		"MOVIE_ANIMATED":               17,
		"VARIETY_SHOW_VARIETY_SHOW":    18,
	}
)

func (x MediaCategory) Enum() *MediaCategory {
	p := new(MediaCategory)
	*p = x
	return p
}

func (x MediaCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_film_service_proto_enumTypes[1].Descriptor()
}

func (MediaCategory) Type() protoreflect.EnumType {
	return &file_proto_film_service_proto_enumTypes[1]
}

func (x MediaCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaCategory.Descriptor instead.
func (MediaCategory) EnumDescriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{1}
}

type MediaLocation int32

const (
	MediaLocation_ALL_LOCATION   MediaLocation = 0
	MediaLocation_OTHER_LOCATION MediaLocation = 1
	MediaLocation_CH             MediaLocation = 2
	MediaLocation_MAIN_LAND      MediaLocation = 3
	MediaLocation_KR             MediaLocation = 4
	MediaLocation_JP             MediaLocation = 5
	MediaLocation_TW             MediaLocation = 6
	MediaLocation_HK             MediaLocation = 7
	MediaLocation_US             MediaLocation = 8
	MediaLocation_EU_US          MediaLocation = 9
	MediaLocation_TH             MediaLocation = 10
	MediaLocation_GB             MediaLocation = 11
	MediaLocation_FR             MediaLocation = 12
	MediaLocation_SG             MediaLocation = 13
)

// Enum value maps for MediaLocation.
var (
	MediaLocation_name = map[int32]string{
		0:  "ALL_LOCATION",
		1:  "OTHER_LOCATION",
		2:  "CH",
		3:  "MAIN_LAND",
		4:  "KR",
		5:  "JP",
		6:  "TW",
		7:  "HK",
		8:  "US",
		9:  "EU_US",
		10: "TH",
		11: "GB",
		12: "FR",
		13: "SG",
	}
	MediaLocation_value = map[string]int32{
		"ALL_LOCATION":   0,
		"OTHER_LOCATION": 1,
		"CH":             2,
		"MAIN_LAND":      3,
		"KR":             4,
		"JP":             5,
		"TW":             6,
		"HK":             7,
		"US":             8,
		"EU_US":          9,
		"TH":             10,
		"GB":             11,
		"FR":             12,
		"SG":             13,
	}
)

func (x MediaLocation) Enum() *MediaLocation {
	p := new(MediaLocation)
	*p = x
	return p
}

func (x MediaLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_film_service_proto_enumTypes[2].Descriptor()
}

func (MediaLocation) Type() protoreflect.EnumType {
	return &file_proto_film_service_proto_enumTypes[2]
}

func (x MediaLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaLocation.Descriptor instead.
func (MediaLocation) EnumDescriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{2}
}

type OrderType int32

const (
	OrderType_UpdateTime        OrderType = 0
	OrderType_UploadTime        OrderType = 1
	OrderType_WEEKLY_POPULARITY OrderType = 2
	OrderType_TOTAL_POPULARITY  OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "UpdateTime",
		1: "UploadTime",
		2: "WEEKLY_POPULARITY",
		3: "TOTAL_POPULARITY",
	}
	OrderType_value = map[string]int32{
		"UpdateTime":        0,
		"UploadTime":        1,
		"WEEKLY_POPULARITY": 2,
		"TOTAL_POPULARITY":  3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_film_service_proto_enumTypes[3].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_proto_film_service_proto_enumTypes[3]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{3}
}

type SearchType int32

const (
	SearchType_TITLE     SearchType = 0
	SearchType_CELEBRITY SearchType = 1
)

// Enum value maps for SearchType.
var (
	SearchType_name = map[int32]string{
		0: "TITLE",
		1: "CELEBRITY",
	}
	SearchType_value = map[string]int32{
		"TITLE":     0,
		"CELEBRITY": 1,
	}
)

func (x SearchType) Enum() *SearchType {
	p := new(SearchType)
	*p = x
	return p
}

func (x SearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_film_service_proto_enumTypes[4].Descriptor()
}

func (SearchType) Type() protoreflect.EnumType {
	return &file_proto_film_service_proto_enumTypes[4]
}

func (x SearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchType.Descriptor instead.
func (SearchType) EnumDescriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{4}
}

type FilmBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FilmBasicRequest) Reset() {
	*x = FilmBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmBasicRequest) ProtoMessage() {}

func (x *FilmBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmBasicRequest.ProtoReflect.Descriptor instead.
func (*FilmBasicRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{0}
}

func (x *FilmBasicRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilmBasicRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilmPopularTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32     `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Type   MediaType `protobuf:"varint,3,opt,name=type,proto3,enum=film.MediaType" json:"type,omitempty"`
}

func (x *FilmPopularTypeRequest) Reset() {
	*x = FilmPopularTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmPopularTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmPopularTypeRequest) ProtoMessage() {}

func (x *FilmPopularTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmPopularTypeRequest.ProtoReflect.Descriptor instead.
func (*FilmPopularTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{1}
}

func (x *FilmPopularTypeRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilmPopularTypeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FilmPopularTypeRequest) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_HOME
}

type FilmPopularCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset   int32         `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Category MediaCategory `protobuf:"varint,3,opt,name=category,proto3,enum=film.MediaCategory" json:"category,omitempty"`
}

func (x *FilmPopularCategoryRequest) Reset() {
	*x = FilmPopularCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmPopularCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmPopularCategoryRequest) ProtoMessage() {}

func (x *FilmPopularCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmPopularCategoryRequest.ProtoReflect.Descriptor instead.
func (*FilmPopularCategoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{2}
}

func (x *FilmPopularCategoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilmPopularCategoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FilmPopularCategoryRequest) GetCategory() MediaCategory {
	if x != nil {
		return x.Category
	}
	return MediaCategory_ALL_CATEGORY
}

type FilmFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset      int32         `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Type        MediaType     `protobuf:"varint,3,opt,name=type,proto3,enum=film.MediaType" json:"type,omitempty"`
	Category    MediaCategory `protobuf:"varint,4,opt,name=category,proto3,enum=film.MediaCategory" json:"category,omitempty"`
	Location    MediaLocation `protobuf:"varint,5,opt,name=location,proto3,enum=film.MediaLocation" json:"location,omitempty"`
	ReleaseYear uint32        `protobuf:"varint,6,opt,name=releaseYear,proto3" json:"releaseYear,omitempty"`
	OrderType   OrderType     `protobuf:"varint,7,opt,name=orderType,proto3,enum=film.OrderType" json:"orderType,omitempty"`
}

func (x *FilmFilterRequest) Reset() {
	*x = FilmFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmFilterRequest) ProtoMessage() {}

func (x *FilmFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmFilterRequest.ProtoReflect.Descriptor instead.
func (*FilmFilterRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{3}
}

func (x *FilmFilterRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilmFilterRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FilmFilterRequest) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_HOME
}

func (x *FilmFilterRequest) GetCategory() MediaCategory {
	if x != nil {
		return x.Category
	}
	return MediaCategory_ALL_CATEGORY
}

func (x *FilmFilterRequest) GetLocation() MediaLocation {
	if x != nil {
		return x.Location
	}
	return MediaLocation_ALL_LOCATION
}

func (x *FilmFilterRequest) GetReleaseYear() uint32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *FilmFilterRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_UpdateTime
}

type FilmInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resource string   `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	State    string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Actors   []string `protobuf:"bytes,5,rep,name=actors,proto3" json:"actors,omitempty"`
}

func (x *FilmInformation) Reset() {
	*x = FilmInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmInformation) ProtoMessage() {}

func (x *FilmInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmInformation.ProtoReflect.Descriptor instead.
func (*FilmInformation) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{4}
}

func (x *FilmInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmInformation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FilmInformation) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *FilmInformation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FilmInformation) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

type FilmInformationListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilmInformation []*FilmInformation `protobuf:"bytes,1,rep,name=filmInformation,proto3" json:"filmInformation,omitempty"`
}

func (x *FilmInformationListReply) Reset() {
	*x = FilmInformationListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmInformationListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmInformationListReply) ProtoMessage() {}

func (x *FilmInformationListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmInformationListReply.ProtoReflect.Descriptor instead.
func (*FilmInformationListReply) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{5}
}

func (x *FilmInformationListReply) GetFilmInformation() []*FilmInformation {
	if x != nil {
		return x.FilmInformation
	}
	return nil
}

type FilmSpecificRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FilmSpecificRequest) Reset() {
	*x = FilmSpecificRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSpecificRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSpecificRequest) ProtoMessage() {}

func (x *FilmSpecificRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSpecificRequest.ProtoReflect.Descriptor instead.
func (*FilmSpecificRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{6}
}

func (x *FilmSpecificRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FilmSpecificRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route    string   `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Episodes []string `protobuf:"bytes,2,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *FilmSpecificRoute) Reset() {
	*x = FilmSpecificRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSpecificRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSpecificRoute) ProtoMessage() {}

func (x *FilmSpecificRoute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSpecificRoute.ProtoReflect.Descriptor instead.
func (*FilmSpecificRoute) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{7}
}

func (x *FilmSpecificRoute) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *FilmSpecificRoute) GetEpisodes() []string {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type FilmSpecificRoutesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*FilmSpecificRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *FilmSpecificRoutesReply) Reset() {
	*x = FilmSpecificRoutesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSpecificRoutesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSpecificRoutesReply) ProtoMessage() {}

func (x *FilmSpecificRoutesReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSpecificRoutesReply.ProtoReflect.Descriptor instead.
func (*FilmSpecificRoutesReply) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{8}
}

func (x *FilmSpecificRoutesReply) GetRoutes() []*FilmSpecificRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

type FilmSpecificReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resource     string                 `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	State        string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Type         MediaType              `protobuf:"varint,5,opt,name=type,proto3,enum=film.MediaType" json:"type,omitempty"`
	Category     MediaCategory          `protobuf:"varint,6,opt,name=category,proto3,enum=film.MediaCategory" json:"category,omitempty"`
	Actors       []string               `protobuf:"bytes,7,rep,name=actors,proto3" json:"actors,omitempty"`
	Directors    []string               `protobuf:"bytes,8,rep,name=directors,proto3" json:"directors,omitempty"`
	Location     MediaLocation          `protobuf:"varint,9,opt,name=location,proto3,enum=film.MediaLocation" json:"location,omitempty"`
	ReleaseYear  uint32                 `protobuf:"varint,10,opt,name=releaseYear,proto3" json:"releaseYear,omitempty"`
	UpdateTime   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Popularity   int32                  `protobuf:"varint,12,opt,name=popularity,proto3" json:"popularity,omitempty"`
	Introduction string                 `protobuf:"bytes,13,opt,name=introduction,proto3" json:"introduction,omitempty"`
}

func (x *FilmSpecificReply) Reset() {
	*x = FilmSpecificReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSpecificReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSpecificReply) ProtoMessage() {}

func (x *FilmSpecificReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSpecificReply.ProtoReflect.Descriptor instead.
func (*FilmSpecificReply) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{9}
}

func (x *FilmSpecificReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmSpecificReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FilmSpecificReply) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *FilmSpecificReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FilmSpecificReply) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_HOME
}

func (x *FilmSpecificReply) GetCategory() MediaCategory {
	if x != nil {
		return x.Category
	}
	return MediaCategory_ALL_CATEGORY
}

func (x *FilmSpecificReply) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *FilmSpecificReply) GetDirectors() []string {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *FilmSpecificReply) GetLocation() MediaLocation {
	if x != nil {
		return x.Location
	}
	return MediaLocation_ALL_LOCATION
}

func (x *FilmSpecificReply) GetReleaseYear() uint32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *FilmSpecificReply) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *FilmSpecificReply) GetPopularity() int32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *FilmSpecificReply) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

type FilmRankedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset   int32         `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Category MediaCategory `protobuf:"varint,3,opt,name=category,proto3,enum=film.MediaCategory" json:"category,omitempty"`
}

func (x *FilmRankedRequest) Reset() {
	*x = FilmRankedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmRankedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmRankedRequest) ProtoMessage() {}

func (x *FilmRankedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmRankedRequest.ProtoReflect.Descriptor instead.
func (*FilmRankedRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{10}
}

func (x *FilmRankedRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilmRankedRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FilmRankedRequest) GetCategory() MediaCategory {
	if x != nil {
		return x.Category
	}
	return MediaCategory_ALL_CATEGORY
}

type FilmRanked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Popularity int32  `protobuf:"varint,3,opt,name=popularity,proto3" json:"popularity,omitempty"`
}

func (x *FilmRanked) Reset() {
	*x = FilmRanked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmRanked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmRanked) ProtoMessage() {}

func (x *FilmRanked) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmRanked.ProtoReflect.Descriptor instead.
func (*FilmRanked) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{11}
}

func (x *FilmRanked) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmRanked) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FilmRanked) GetPopularity() int32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

type FilmRankedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankedFilm []*FilmRanked `protobuf:"bytes,1,rep,name=rankedFilm,proto3" json:"rankedFilm,omitempty"`
}

func (x *FilmRankedReply) Reset() {
	*x = FilmRankedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmRankedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmRankedReply) ProtoMessage() {}

func (x *FilmRankedReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmRankedReply.ProtoReflect.Descriptor instead.
func (*FilmRankedReply) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{12}
}

func (x *FilmRankedReply) GetRankedFilm() []*FilmRanked {
	if x != nil {
		return x.RankedFilm
	}
	return nil
}

type FilmSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchType SearchType `protobuf:"varint,1,opt,name=searchType,proto3,enum=film.SearchType" json:"searchType,omitempty"`
	Content    string     `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Offset     int32      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int32      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FilmSearchRequest) Reset() {
	*x = FilmSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSearchRequest) ProtoMessage() {}

func (x *FilmSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSearchRequest.ProtoReflect.Descriptor instead.
func (*FilmSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{13}
}

func (x *FilmSearchRequest) GetSearchType() SearchType {
	if x != nil {
		return x.SearchType
	}
	return SearchType_TITLE
}

func (x *FilmSearchRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FilmSearchRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilmSearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilmSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resource     string                 `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	State        string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Category     MediaCategory          `protobuf:"varint,5,opt,name=category,proto3,enum=film.MediaCategory" json:"category,omitempty"`
	Actors       []string               `protobuf:"bytes,6,rep,name=actors,proto3" json:"actors,omitempty"`
	Director     []string               `protobuf:"bytes,7,rep,name=director,proto3" json:"director,omitempty"`
	Location     MediaLocation          `protobuf:"varint,8,opt,name=location,proto3,enum=film.MediaLocation" json:"location,omitempty"`
	Language     string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	ReleaseYear  uint32                 `protobuf:"varint,10,opt,name=releaseYear,proto3" json:"releaseYear,omitempty"`
	UpdateTime   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Introduction string                 `protobuf:"bytes,12,opt,name=introduction,proto3" json:"introduction,omitempty"`
}

func (x *FilmSearchResult) Reset() {
	*x = FilmSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSearchResult) ProtoMessage() {}

func (x *FilmSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSearchResult.ProtoReflect.Descriptor instead.
func (*FilmSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{14}
}

func (x *FilmSearchResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmSearchResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FilmSearchResult) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *FilmSearchResult) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FilmSearchResult) GetCategory() MediaCategory {
	if x != nil {
		return x.Category
	}
	return MediaCategory_ALL_CATEGORY
}

func (x *FilmSearchResult) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *FilmSearchResult) GetDirector() []string {
	if x != nil {
		return x.Director
	}
	return nil
}

func (x *FilmSearchResult) GetLocation() MediaLocation {
	if x != nil {
		return x.Location
	}
	return MediaLocation_ALL_LOCATION
}

func (x *FilmSearchResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *FilmSearchResult) GetReleaseYear() uint32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *FilmSearchResult) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *FilmSearchResult) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

type FilmSearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FilmSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FilmSearchReply) Reset() {
	*x = FilmSearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSearchReply) ProtoMessage() {}

func (x *FilmSearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSearchReply.ProtoReflect.Descriptor instead.
func (*FilmSearchReply) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{15}
}

func (x *FilmSearchReply) GetResults() []*FilmSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FilmSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resource     string        `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	State        string        `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Type         MediaType     `protobuf:"varint,5,opt,name=type,proto3,enum=film.MediaType" json:"type,omitempty"`
	Category     MediaCategory `protobuf:"varint,6,opt,name=category,proto3,enum=film.MediaCategory" json:"category,omitempty"`
	Actors       []string      `protobuf:"bytes,7,rep,name=actors,proto3" json:"actors,omitempty"`
	Directors    []string      `protobuf:"bytes,8,rep,name=directors,proto3" json:"directors,omitempty"`
	Location     MediaLocation `protobuf:"varint,9,opt,name=location,proto3,enum=film.MediaLocation" json:"location,omitempty"`
	ReleaseYear  uint32        `protobuf:"varint,10,opt,name=releaseYear,proto3" json:"releaseYear,omitempty"`
	Introduction string        `protobuf:"bytes,11,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Language     string        `protobuf:"bytes,12,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *FilmSaveRequest) Reset() {
	*x = FilmSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSaveRequest) ProtoMessage() {}

func (x *FilmSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSaveRequest.ProtoReflect.Descriptor instead.
func (*FilmSaveRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{16}
}

func (x *FilmSaveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmSaveRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FilmSaveRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *FilmSaveRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FilmSaveRequest) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_HOME
}

func (x *FilmSaveRequest) GetCategory() MediaCategory {
	if x != nil {
		return x.Category
	}
	return MediaCategory_ALL_CATEGORY
}

func (x *FilmSaveRequest) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *FilmSaveRequest) GetDirectors() []string {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *FilmSaveRequest) GetLocation() MediaLocation {
	if x != nil {
		return x.Location
	}
	return MediaLocation_ALL_LOCATION
}

func (x *FilmSaveRequest) GetReleaseYear() uint32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *FilmSaveRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *FilmSaveRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FilmSaveEpisodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Route   string `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Episode string `protobuf:"bytes,3,opt,name=episode,proto3" json:"episode,omitempty"`
	State   string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FilmSaveEpisodeRequest) Reset() {
	*x = FilmSaveEpisodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_film_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmSaveEpisodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmSaveEpisodeRequest) ProtoMessage() {}

func (x *FilmSaveEpisodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_film_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmSaveEpisodeRequest.ProtoReflect.Descriptor instead.
func (*FilmSaveEpisodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_film_service_proto_rawDescGZIP(), []int{17}
}

func (x *FilmSaveEpisodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmSaveEpisodeRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *FilmSaveEpisodeRequest) GetEpisode() string {
	if x != nil {
		return x.Episode
	}
	return ""
}

func (x *FilmSaveEpisodeRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

var File_proto_film_service_proto protoreflect.FileDescriptor

var file_proto_film_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x69, 0x6c, 0x6d,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x6b, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a,
	0x1a, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x18, 0x46, 0x69,
	0x6c, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2f, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xca, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3a,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0x52, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x43, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x22, 0x8d, 0x01, 0x0a, 0x11,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9e, 0x03, 0x0a, 0x10,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x88, 0x03, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x6c, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x16,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x4f, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41,
	0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x53, 0x10, 0x04, 0x2a, 0xbb, 0x03,
	0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x43,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x56,
	0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x4b, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45,
	0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53,
	0x5f, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x4a, 0x50, 0x5f, 0x53, 0x45, 0x52,
	0x49, 0x45, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x49,
	0x45, 0x53, 0x5f, 0x54, 0x57, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x48, 0x4b, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x56, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x45, 0x41, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x45, 0x53, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x56, 0x5f, 0x53, 0x45, 0x52,
	0x49, 0x45, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x49, 0x4d,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x0a, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x53, 0x43, 0x49, 0x5f, 0x46, 0x49,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x45,
	0x44, 0x59, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x48, 0x4f,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f,
	0x52, 0x4f, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x56,
	0x49, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x56, 0x49,
	0x45, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19,
	0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x45, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x12, 0x2a, 0x9f, 0x01, 0x0a, 0x0d,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x52,
	0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x50, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x57,
	0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x4b, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x53,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x55, 0x5f, 0x55, 0x53, 0x10, 0x09, 0x12, 0x06, 0x0a,
	0x02, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x42, 0x10, 0x0b, 0x12, 0x06, 0x0a,
	0x02, 0x46, 0x52, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x47, 0x10, 0x0d, 0x2a, 0x58, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x45,
	0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c,
	0x41, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x2a, 0x26, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x45, 0x4c, 0x45, 0x42, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x32,
	0xaa, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x66, 0x69, 0x6c, 0x6d,
	0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x20, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x17, 0x2e, 0x66, 0x69,
	0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12,
	0x17, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x19, 0x2e,
	0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x66,
	0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x17, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08,
	0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x53, 0x61, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x6d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x66,
	0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x6d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x6d,
	0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x12,
	0x19, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x54,
	0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x2e,
	0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_film_service_proto_rawDescOnce sync.Once
	file_proto_film_service_proto_rawDescData = file_proto_film_service_proto_rawDesc
)

func file_proto_film_service_proto_rawDescGZIP() []byte {
	file_proto_film_service_proto_rawDescOnce.Do(func() {
		file_proto_film_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_film_service_proto_rawDescData)
	})
	return file_proto_film_service_proto_rawDescData
}

var file_proto_film_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_film_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_film_service_proto_goTypes = []interface{}{
	(MediaType)(0),                     // 0: film.MediaType
	(MediaCategory)(0),                 // 1: film.MediaCategory
	(MediaLocation)(0),                 // 2: film.MediaLocation
	(OrderType)(0),                     // 3: film.OrderType
	(SearchType)(0),                    // 4: film.SearchType
	(*FilmBasicRequest)(nil),           // 5: film.FilmBasicRequest
	(*FilmPopularTypeRequest)(nil),     // 6: film.FilmPopularTypeRequest
	(*FilmPopularCategoryRequest)(nil), // 7: film.FilmPopularCategoryRequest
	(*FilmFilterRequest)(nil),          // 8: film.FilmFilterRequest
	(*FilmInformation)(nil),            // 9: film.FilmInformation
	(*FilmInformationListReply)(nil),   // 10: film.FilmInformationListReply
	(*FilmSpecificRequest)(nil),        // 11: film.FilmSpecificRequest
	(*FilmSpecificRoute)(nil),          // 12: film.FilmSpecificRoute
	(*FilmSpecificRoutesReply)(nil),    // 13: film.FilmSpecificRoutesReply
	(*FilmSpecificReply)(nil),          // 14: film.FilmSpecificReply
	(*FilmRankedRequest)(nil),          // 15: film.FilmRankedRequest
	(*FilmRanked)(nil),                 // 16: film.FilmRanked
	(*FilmRankedReply)(nil),            // 17: film.FilmRankedReply
	(*FilmSearchRequest)(nil),          // 18: film.FilmSearchRequest
	(*FilmSearchResult)(nil),           // 19: film.FilmSearchResult
	(*FilmSearchReply)(nil),            // 20: film.FilmSearchReply
	(*FilmSaveRequest)(nil),            // 21: film.FilmSaveRequest
	(*FilmSaveEpisodeRequest)(nil),     // 22: film.FilmSaveEpisodeRequest
	(*timestamppb.Timestamp)(nil),      // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),              // 24: google.protobuf.Empty
}
var file_proto_film_service_proto_depIdxs = []int32{
	0,  // 0: film.FilmPopularTypeRequest.type:type_name -> film.MediaType
	1,  // 1: film.FilmPopularCategoryRequest.category:type_name -> film.MediaCategory
	0,  // 2: film.FilmFilterRequest.type:type_name -> film.MediaType
	1,  // 3: film.FilmFilterRequest.category:type_name -> film.MediaCategory
	2,  // 4: film.FilmFilterRequest.location:type_name -> film.MediaLocation
	3,  // 5: film.FilmFilterRequest.orderType:type_name -> film.OrderType
	9,  // 6: film.FilmInformationListReply.filmInformation:type_name -> film.FilmInformation
	12, // 7: film.FilmSpecificRoutesReply.routes:type_name -> film.FilmSpecificRoute
	0,  // 8: film.FilmSpecificReply.type:type_name -> film.MediaType
	1,  // 9: film.FilmSpecificReply.category:type_name -> film.MediaCategory
	2,  // 10: film.FilmSpecificReply.location:type_name -> film.MediaLocation
	23, // 11: film.FilmSpecificReply.updateTime:type_name -> google.protobuf.Timestamp
	1,  // 12: film.FilmRankedRequest.category:type_name -> film.MediaCategory
	16, // 13: film.FilmRankedReply.rankedFilm:type_name -> film.FilmRanked
	4,  // 14: film.FilmSearchRequest.searchType:type_name -> film.SearchType
	1,  // 15: film.FilmSearchResult.category:type_name -> film.MediaCategory
	2,  // 16: film.FilmSearchResult.location:type_name -> film.MediaLocation
	23, // 17: film.FilmSearchResult.updateTime:type_name -> google.protobuf.Timestamp
	19, // 18: film.FilmSearchReply.results:type_name -> film.FilmSearchResult
	0,  // 19: film.FilmSaveRequest.type:type_name -> film.MediaType
	1,  // 20: film.FilmSaveRequest.category:type_name -> film.MediaCategory
	2,  // 21: film.FilmSaveRequest.location:type_name -> film.MediaLocation
	5,  // 22: film.Film.GetBasicFilms:input_type -> film.FilmBasicRequest
	6,  // 23: film.Film.GetPopularTypeFilms:input_type -> film.FilmPopularTypeRequest
	7,  // 24: film.Film.GetPopularCategoryFilms:input_type -> film.FilmPopularCategoryRequest
	15, // 25: film.Film.GetRankedFilms:input_type -> film.FilmRankedRequest
	8,  // 26: film.Film.GetFilterFilms:input_type -> film.FilmFilterRequest
	11, // 27: film.Film.GetSpecificFilm:input_type -> film.FilmSpecificRequest
	11, // 28: film.Film.GetSpecificFilmRoutes:input_type -> film.FilmSpecificRequest
	18, // 29: film.Film.GetSearchFilms:input_type -> film.FilmSearchRequest
	21, // 30: film.Film.SaveFilm:input_type -> film.FilmSaveRequest
	22, // 31: film.Film.SaveFilmEpisode:input_type -> film.FilmSaveEpisodeRequest
	22, // 32: film.Film.DeleteFilmEpisode:input_type -> film.FilmSaveEpisodeRequest
	11, // 33: film.Film.DeleteFilm:input_type -> film.FilmSpecificRequest
	11, // 34: film.Film.AddFilmToSearchEngine:input_type -> film.FilmSpecificRequest
	11, // 35: film.Film.AddFilmPopularity:input_type -> film.FilmSpecificRequest
	10, // 36: film.Film.GetBasicFilms:output_type -> film.FilmInformationListReply
	10, // 37: film.Film.GetPopularTypeFilms:output_type -> film.FilmInformationListReply
	10, // 38: film.Film.GetPopularCategoryFilms:output_type -> film.FilmInformationListReply
	17, // 39: film.Film.GetRankedFilms:output_type -> film.FilmRankedReply
	10, // 40: film.Film.GetFilterFilms:output_type -> film.FilmInformationListReply
	14, // 41: film.Film.GetSpecificFilm:output_type -> film.FilmSpecificReply
	13, // 42: film.Film.GetSpecificFilmRoutes:output_type -> film.FilmSpecificRoutesReply
	20, // 43: film.Film.GetSearchFilms:output_type -> film.FilmSearchReply
	24, // 44: film.Film.SaveFilm:output_type -> google.protobuf.Empty
	24, // 45: film.Film.SaveFilmEpisode:output_type -> google.protobuf.Empty
	24, // 46: film.Film.DeleteFilmEpisode:output_type -> google.protobuf.Empty
	24, // 47: film.Film.DeleteFilm:output_type -> google.protobuf.Empty
	24, // 48: film.Film.AddFilmToSearchEngine:output_type -> google.protobuf.Empty
	24, // 49: film.Film.AddFilmPopularity:output_type -> google.protobuf.Empty
	36, // [36:50] is the sub-list for method output_type
	22, // [22:36] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_proto_film_service_proto_init() }
func file_proto_film_service_proto_init() {
	if File_proto_film_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_film_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmPopularTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmPopularCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmInformationListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSpecificRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSpecificRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSpecificRoutesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSpecificReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmRankedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmRanked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmRankedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_film_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmSaveEpisodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_film_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_film_service_proto_goTypes,
		DependencyIndexes: file_proto_film_service_proto_depIdxs,
		EnumInfos:         file_proto_film_service_proto_enumTypes,
		MessageInfos:      file_proto_film_service_proto_msgTypes,
	}.Build()
	File_proto_film_service_proto = out.File
	file_proto_film_service_proto_rawDesc = nil
	file_proto_film_service_proto_goTypes = nil
	file_proto_film_service_proto_depIdxs = nil
}

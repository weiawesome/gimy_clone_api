// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: proto/film_service.proto

package film_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Film_GetBasicFilms_FullMethodName           = "/film.Film/GetBasicFilms"
	Film_GetPopularTypeFilms_FullMethodName     = "/film.Film/GetPopularTypeFilms"
	Film_GetPopularCategoryFilms_FullMethodName = "/film.Film/GetPopularCategoryFilms"
	Film_GetRankedFilms_FullMethodName          = "/film.Film/GetRankedFilms"
	Film_GetFilterFilms_FullMethodName          = "/film.Film/GetFilterFilms"
	Film_GetSpecificFilm_FullMethodName         = "/film.Film/GetSpecificFilm"
	Film_GetSpecificFilmRoutes_FullMethodName   = "/film.Film/GetSpecificFilmRoutes"
	Film_GetSearchFilms_FullMethodName          = "/film.Film/GetSearchFilms"
	Film_SaveFilm_FullMethodName                = "/film.Film/SaveFilm"
	Film_SaveFilmEpisode_FullMethodName         = "/film.Film/SaveFilmEpisode"
	Film_AddFilmToSearchEngine_FullMethodName   = "/film.Film/AddFilmToSearchEngine"
	Film_AddFilmPopularity_FullMethodName       = "/film.Film/AddFilmPopularity"
)

// FilmClient is the client API for Film service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmClient interface {
	GetBasicFilms(ctx context.Context, in *FilmBasicRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error)
	GetPopularTypeFilms(ctx context.Context, in *FilmPopularTypeRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error)
	GetPopularCategoryFilms(ctx context.Context, in *FilmPopularCategoryRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error)
	GetRankedFilms(ctx context.Context, in *FilmRankedRequest, opts ...grpc.CallOption) (*FilmRankedReply, error)
	GetFilterFilms(ctx context.Context, in *FilmFilterRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error)
	GetSpecificFilm(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*FilmSpecificReply, error)
	GetSpecificFilmRoutes(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*FilmSpecificRoutesReply, error)
	GetSearchFilms(ctx context.Context, in *FilmSearchRequest, opts ...grpc.CallOption) (*FilmSearchReply, error)
	SaveFilm(ctx context.Context, in *FilmSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SaveFilmEpisode(ctx context.Context, in *FilmSaveEpisodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFilmToSearchEngine(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFilmPopularity(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type filmClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmClient(cc grpc.ClientConnInterface) FilmClient {
	return &filmClient{cc}
}

func (c *filmClient) GetBasicFilms(ctx context.Context, in *FilmBasicRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error) {
	out := new(FilmInformationListReply)
	err := c.cc.Invoke(ctx, Film_GetBasicFilms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetPopularTypeFilms(ctx context.Context, in *FilmPopularTypeRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error) {
	out := new(FilmInformationListReply)
	err := c.cc.Invoke(ctx, Film_GetPopularTypeFilms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetPopularCategoryFilms(ctx context.Context, in *FilmPopularCategoryRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error) {
	out := new(FilmInformationListReply)
	err := c.cc.Invoke(ctx, Film_GetPopularCategoryFilms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetRankedFilms(ctx context.Context, in *FilmRankedRequest, opts ...grpc.CallOption) (*FilmRankedReply, error) {
	out := new(FilmRankedReply)
	err := c.cc.Invoke(ctx, Film_GetRankedFilms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetFilterFilms(ctx context.Context, in *FilmFilterRequest, opts ...grpc.CallOption) (*FilmInformationListReply, error) {
	out := new(FilmInformationListReply)
	err := c.cc.Invoke(ctx, Film_GetFilterFilms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetSpecificFilm(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*FilmSpecificReply, error) {
	out := new(FilmSpecificReply)
	err := c.cc.Invoke(ctx, Film_GetSpecificFilm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetSpecificFilmRoutes(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*FilmSpecificRoutesReply, error) {
	out := new(FilmSpecificRoutesReply)
	err := c.cc.Invoke(ctx, Film_GetSpecificFilmRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetSearchFilms(ctx context.Context, in *FilmSearchRequest, opts ...grpc.CallOption) (*FilmSearchReply, error) {
	out := new(FilmSearchReply)
	err := c.cc.Invoke(ctx, Film_GetSearchFilms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) SaveFilm(ctx context.Context, in *FilmSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Film_SaveFilm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) SaveFilmEpisode(ctx context.Context, in *FilmSaveEpisodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Film_SaveFilmEpisode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) AddFilmToSearchEngine(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Film_AddFilmToSearchEngine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) AddFilmPopularity(ctx context.Context, in *FilmSpecificRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Film_AddFilmPopularity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmServer is the server API for Film service.
// All implementations must embed UnimplementedFilmServer
// for forward compatibility
type FilmServer interface {
	GetBasicFilms(context.Context, *FilmBasicRequest) (*FilmInformationListReply, error)
	GetPopularTypeFilms(context.Context, *FilmPopularTypeRequest) (*FilmInformationListReply, error)
	GetPopularCategoryFilms(context.Context, *FilmPopularCategoryRequest) (*FilmInformationListReply, error)
	GetRankedFilms(context.Context, *FilmRankedRequest) (*FilmRankedReply, error)
	GetFilterFilms(context.Context, *FilmFilterRequest) (*FilmInformationListReply, error)
	GetSpecificFilm(context.Context, *FilmSpecificRequest) (*FilmSpecificReply, error)
	GetSpecificFilmRoutes(context.Context, *FilmSpecificRequest) (*FilmSpecificRoutesReply, error)
	GetSearchFilms(context.Context, *FilmSearchRequest) (*FilmSearchReply, error)
	SaveFilm(context.Context, *FilmSaveRequest) (*emptypb.Empty, error)
	SaveFilmEpisode(context.Context, *FilmSaveEpisodeRequest) (*emptypb.Empty, error)
	AddFilmToSearchEngine(context.Context, *FilmSpecificRequest) (*emptypb.Empty, error)
	AddFilmPopularity(context.Context, *FilmSpecificRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFilmServer()
}

// UnimplementedFilmServer must be embedded to have forward compatible implementations.
type UnimplementedFilmServer struct {
}

func (UnimplementedFilmServer) GetBasicFilms(context.Context, *FilmBasicRequest) (*FilmInformationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicFilms not implemented")
}
func (UnimplementedFilmServer) GetPopularTypeFilms(context.Context, *FilmPopularTypeRequest) (*FilmInformationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularTypeFilms not implemented")
}
func (UnimplementedFilmServer) GetPopularCategoryFilms(context.Context, *FilmPopularCategoryRequest) (*FilmInformationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularCategoryFilms not implemented")
}
func (UnimplementedFilmServer) GetRankedFilms(context.Context, *FilmRankedRequest) (*FilmRankedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankedFilms not implemented")
}
func (UnimplementedFilmServer) GetFilterFilms(context.Context, *FilmFilterRequest) (*FilmInformationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilterFilms not implemented")
}
func (UnimplementedFilmServer) GetSpecificFilm(context.Context, *FilmSpecificRequest) (*FilmSpecificReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificFilm not implemented")
}
func (UnimplementedFilmServer) GetSpecificFilmRoutes(context.Context, *FilmSpecificRequest) (*FilmSpecificRoutesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificFilmRoutes not implemented")
}
func (UnimplementedFilmServer) GetSearchFilms(context.Context, *FilmSearchRequest) (*FilmSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchFilms not implemented")
}
func (UnimplementedFilmServer) SaveFilm(context.Context, *FilmSaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFilm not implemented")
}
func (UnimplementedFilmServer) SaveFilmEpisode(context.Context, *FilmSaveEpisodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFilmEpisode not implemented")
}
func (UnimplementedFilmServer) AddFilmToSearchEngine(context.Context, *FilmSpecificRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFilmToSearchEngine not implemented")
}
func (UnimplementedFilmServer) AddFilmPopularity(context.Context, *FilmSpecificRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFilmPopularity not implemented")
}
func (UnimplementedFilmServer) mustEmbedUnimplementedFilmServer() {}

// UnsafeFilmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmServer will
// result in compilation errors.
type UnsafeFilmServer interface {
	mustEmbedUnimplementedFilmServer()
}

func RegisterFilmServer(s grpc.ServiceRegistrar, srv FilmServer) {
	s.RegisterService(&Film_ServiceDesc, srv)
}

func _Film_GetBasicFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetBasicFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetBasicFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetBasicFilms(ctx, req.(*FilmBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetPopularTypeFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmPopularTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetPopularTypeFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetPopularTypeFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetPopularTypeFilms(ctx, req.(*FilmPopularTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetPopularCategoryFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmPopularCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetPopularCategoryFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetPopularCategoryFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetPopularCategoryFilms(ctx, req.(*FilmPopularCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetRankedFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRankedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetRankedFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetRankedFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetRankedFilms(ctx, req.(*FilmRankedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetFilterFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetFilterFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetFilterFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetFilterFilms(ctx, req.(*FilmFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetSpecificFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSpecificRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetSpecificFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetSpecificFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetSpecificFilm(ctx, req.(*FilmSpecificRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetSpecificFilmRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSpecificRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetSpecificFilmRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetSpecificFilmRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetSpecificFilmRoutes(ctx, req.(*FilmSpecificRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetSearchFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetSearchFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_GetSearchFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetSearchFilms(ctx, req.(*FilmSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_SaveFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).SaveFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_SaveFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).SaveFilm(ctx, req.(*FilmSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_SaveFilmEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSaveEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).SaveFilmEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_SaveFilmEpisode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).SaveFilmEpisode(ctx, req.(*FilmSaveEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_AddFilmToSearchEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSpecificRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).AddFilmToSearchEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_AddFilmToSearchEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).AddFilmToSearchEngine(ctx, req.(*FilmSpecificRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_AddFilmPopularity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmSpecificRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).AddFilmPopularity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Film_AddFilmPopularity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).AddFilmPopularity(ctx, req.(*FilmSpecificRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Film_ServiceDesc is the grpc.ServiceDesc for Film service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Film_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "film.Film",
	HandlerType: (*FilmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasicFilms",
			Handler:    _Film_GetBasicFilms_Handler,
		},
		{
			MethodName: "GetPopularTypeFilms",
			Handler:    _Film_GetPopularTypeFilms_Handler,
		},
		{
			MethodName: "GetPopularCategoryFilms",
			Handler:    _Film_GetPopularCategoryFilms_Handler,
		},
		{
			MethodName: "GetRankedFilms",
			Handler:    _Film_GetRankedFilms_Handler,
		},
		{
			MethodName: "GetFilterFilms",
			Handler:    _Film_GetFilterFilms_Handler,
		},
		{
			MethodName: "GetSpecificFilm",
			Handler:    _Film_GetSpecificFilm_Handler,
		},
		{
			MethodName: "GetSpecificFilmRoutes",
			Handler:    _Film_GetSpecificFilmRoutes_Handler,
		},
		{
			MethodName: "GetSearchFilms",
			Handler:    _Film_GetSearchFilms_Handler,
		},
		{
			MethodName: "SaveFilm",
			Handler:    _Film_SaveFilm_Handler,
		},
		{
			MethodName: "SaveFilmEpisode",
			Handler:    _Film_SaveFilmEpisode_Handler,
		},
		{
			MethodName: "AddFilmToSearchEngine",
			Handler:    _Film_AddFilmToSearchEngine_Handler,
		},
		{
			MethodName: "AddFilmPopularity",
			Handler:    _Film_AddFilmPopularity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/film_service.proto",
}
